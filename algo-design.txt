-------------- Program Description: -------------------
Using a File-in, File-out (FIFO) 
function(s), manipulate the date for the Fleet (class)
of Airplane (class) as they are nested Classes. Both 
classes need private and public member functions that
are dynamic for memory. Both classes require the 
"rule of 3": Destructor, Copy Constructor, & Overloaded
Assignment Operator. Beyond the dynamic memory 
addition to this version of the program, a growArray()
needs to be created that will be nested in Insert()
function. The program is menu-driven by the user. 
They can view planes, add a new plane, search for a
plane, etc. 

------- My notes / tasks:

1. File (planes.text) needs to be uploaded successfully 
    first of all, as that is the data to manipulate. It
    needs to be sorted by model (required). The
    file will also be exported back out, formatted and 
    in a different file name (i.e. output.txt) 
    - keeping planes.txt in its original state.
    - "You may not use a user-defined sorting function 
        or sort function from a library - this means 
        that each airplane must be inserted into the array in   
        sorted order."
    - Only load from the file at the start of the program. 
      Only write to the file at program termination.
      
2. Allocate memory for c-string and the array 
   of Airplanes class dynamically. Which means:
    a. char pointers for c-string
      i. Code will count # of characters necessary
          for the make and model, then only allocate
          that many characters, plus 1 for null-terminator.
    b. Airplane pointer for the Airplane array
      i. Code will allocate a small Airplane array, and
          then "grow" (grow() function to be coded) if
          more room is needed. 
3. Encapsulate and hide data (like Assignment 2). 
    a. The Fleet class must encapsulate the array of 
        Airplane class objects, and array must be private.
4. Create the menu-drive program, which will be a 
    user-controlled loop. Inside of the loop, the user is
    asked what they want to do.
5. The user menu will look like this (And see sample run 
    below for more specific expected results):
      (L)ist all planes
      (A)dd a new plane
      (R)emove a plane by index
      (S)earch for airplane by model
      List all airplanes by (M)ake
      (Q)uit
6. The menu above is the assignment version A which means I am
    aiming for the A grade. If we are stumped on (S) or (M) 
    menu functions, it will be ok and I can get a B. We can 
    also focus on those last.
7. Data Validation! The mandatory data validation I need to 
    create functions for are:
      a. Make sure all #s (ints) are positive
      b. Check for proper index to remove (not out of bounds)
      Also:
        i. Make sure the max fuel is < 150 gallons
        ii. Make sure empty weight is < 3000 lbs
        iii. Make sure engine hp is < 400
        iv. Make sure range is < 2000
        v. Make sure max cruise speed is < 250 knots
      c. Check for input failure everywhere.
      d. Don't allow the program to crash or go into an 
          infinite loop when letters are typed for input to
          numbers.

-------------- General Rules -----------------------------------

1. multi-files are required (as seen below)
2. only use tools.h/tools.cpp for functions un-related to
    planes or fleet directly (i.e. data validation or display
    menu), the rest should be in public or private as stated.
3. DO NOT use string library
4. DO NOT use STL containers, such as vectors
5. Encapsulate your array of Airplane objects in the Fleet   
    class.
6. No global variables (unless const char)
7. Check size of Airplane array against a member variable, 
    perhaps called capacity, that will be set in the 
    constructor function (Airplane::Airplane, etc)
      a. If the size of the array >= capacity, then
          grow the array by calling growArray()
8. Make sure file is open, ifstream.is_open()
9. Check for negative values and bad data
10. Use file guards in header files (DONE)
11. Use Airplane class to represent Airplane data and the Fleet
    class to represent a collection.
12. No while (true) loops allowed, needs to have while(specific
    condition). 
13. You cannot use return, break, or continue for most things,
    there are exceptions to the rule like in switch statements
    or other, but usually a specific condition is required.
    
----------------- Programming Strategies -----------------------
12. Because we are using dynamic c-strings and dynamic arrays,
    the constructor for Airplane will be responsible for
    allocating dynamic memory, or for setting the char pointers
    to nullptr. You can either allocate memory for something
    like "none" (literally), or set to nullptr. "None" was
    actually recommended by my teacher instead of nullptr.
13. The Constructor for the fleet will need to allocate an 
    array for fleetAirplanes. 
      a. Set the array capacity small, such as 3, so that it 
          will be easy to test your growArray() function.
14. Rule of "3" (mentioned above)
15. We can't rely on automatic versions of copy constructor
     and assignment operator that are provided, because our
     classes have dynamically allocated properties.
      a. We must provide overloaded code for them, then we will
          won't have a serious problem, called "Shallow copy."
      b. This is because our objects contain dynamic variables,
          which are simply pointers.
16. We need a deepy copy, so code in overloaded copy constructor
    and assignment operator, by first finding out how many
    characters are in a2.model, and allocate just the right
    amount of characters for a1.model, and then use:
      a. strcpy(a1.model, a2.model)
17. You will need a similar strategy for c-strings. We will have
    to delete the currently assigned memory and then allocate
    new memory for the new model name. 
18. Use the same strategy for the growArray() function
      a. Once a new array is copied to create new array, 
          delete the old array, and then set fleetAirplanes
          to the new array.
19. The Destructor is invoked when an object is no longer
      accessible. which is when an automatic object (on the
      stack) goes out of scope or when a dynamically allocated
      object (on the heap) is deleted. The only thing the 
      destructors will need to do is call delete or 
      delete[] for all of the dynamically allocated properties.
20. If all of the dynamic memory is deleted before program
    termination, then there can't be any memory leaks. Use
    Valgrind, a program on the Linux Server (and Replit), that
    checks for memory leaks and other memory errors. 
      

-------------- Airplane Class (Can not be changed) -------------

class Airplane {
private:  // Properties are private.
    char * make;
    char * model;
    double maxFuel;   // in gallons
    int emptyWeight;  // in pounds
    int engineHP;     // horse power
    int maxRange;  // nautical miles
    int cruiseSpeed; // knots
public:
    Airplane(); // default constructor.
    Airplane(const Airplane &);
    ~Airplane();
    Airplane & operator=(const Airplane &);
    // Getters
    const char * getMake();
    const char * getModel();
    double getMaxFuel();
    int getEmptyWeight();
    int getMaxRange();
    int getCruiseSpeed();
    // Setters
    void setMake(const char *);
    void setModel(const char *);
    void setMaxFuel(double);
    void setEmptyWeight(int);
    void setMaxRange(int);
    void setCruiseSpeed(int);
};

--------------------- Fleet Class (cannot be changed)-----------
class Fleet {
  private:
    char fileName[STR_SIZE];
    ifstream inFile;
    int count;
    int capacity;
    Airplane * fleetAirplanes;
    bool insert(); // private method.

  public:
    Fleet(); // Default constructor.
    Fleet(const Fleet &) = delete;
    Fleet & operator=(const Fleet &) = delete;
    int loadPlanes();
    void printPlanes();
    void listByMake();
    bool addAPlane();
    bool removeAPlane();
    void writePlanes();
    void growArray();
};

    ----------------------- planes.txt ------------------------
    
    360;Lancair;43.00;1090;180;990;208
    Skyhawk 172;Cessna;53.00;1663;180;515;123
    K35 Bonanza;Beechcraft;70.00;1832;250;534;168
    RangeMaster H;Navion;40.00;1945;330;1381;160 
    Tomahawk;Piper;30.00;1128;112;383;107
    M20R Ovation;Mooney;89.00;2205;280;969;189
    C23 Sundowner;Beechcraft;57.00;1494;180;564;115
    RV-12;Vans Aircraft;20.00;750;100;451;119
    TB-21 GT Trinidad;Socata;88.00;1911;250;1025;168
    RV-9;Vans Aircraft;36.00;1057;160;616;163
    152;Cessna;26.00;1081;110;414;106
    Tiger;Grumman;51.00;1360;180;529;139
    Super Cub;Piper;36.00;845;125;449;96
    
    ----------------------- Tools.h ---------------------------
    
    - #ifndef TOOLS_H, #define TOOLS_H
    - include iostream, fstream, cstring, "Fleet.h", using
      namespace std
    - FUNCTION PROTOTYPES:
      1. displayMenu()
      2. validateInput (bool for a float)
      3. valdiateInput (bool for an int)
    - #endif
    
    ----------------------- Tools.cpp -------------------------
   
    - FUNCTION DEFINITIONS:
      1. displayMenu()
      2. validateInput (bool for a float)
      3. validateInput (bool for an int)

--------------------------- Airplane.h --------------------------
   
    - Airplane class is described

-------------------------- Airplane.cpp -------------------------
    // Class / object:

Airplane::Airplane() {
        strcpy(make, "");
        strcpy(model, "");
        maxFuel = 0.0;
        emptyWeight = 0;
        engineHP = 0;
        maxRange = 0;
        cruiseSpeed = 0;
    }

Airplane::Airplane(const Airplane &)

Airplane& Airplane::operator=(const Airplane &other) {
    if (this == &other) return *this;
    delete[] make;
    delete[] model;
    make = new char[strlen(other.make) + 1];
    strcpy(make, other.make);
    model = new char[strlen(other.model) + 1];
    strcpy(model, other.model);
    maxFuel = other.maxFuel;
    emptyWeight = other.emptyWeight;
    engineHP = other.engineHP;
    maxRange = other.maxRange;
    cruiseSpeed = other.cruiseSpeed;
    return *this;
}


Airplane::~Airplane() {
    delete[] make;
    delete[] model;
}


const char* Airplane::getMake() {
    return make; 
}


const char* Airplane::getModel() { 
    return model; 
}


double Airplane::getMaxFuel() { 
    return maxFuel; 
}


int Airplane::getEmptyWeight() { 
    return emptyWeight; 
}


int Airplane::getEngineHP() { 
    return engineHP; 
}


int Airplane::getMaxRange() { 
    return maxRange; 
}


int Airplane::getCruiseSpeed() { 
    return cruiseSpeed; 
}


void Airplane::setMake(const char * make) {
    delete[] this->make;
    this->make = new char[strlen(make) + 1];
    strcpy(this->make, make);
}


void Airplane::setModel(const char * model) {
    delete[] this->model;
    this->model = new char[strlen(model) + 1];
    strcpy(this->model, model);
}


void Airplane::setMaxFuel(double maxFuel) { 
    this->maxFuel = maxFuel; 
}


void Airplane::setEmptyWeight(int emptyWeight) { 
    this->emptyWeight = emptyWeight; 
}


void Airplane::setEngineHP(int engineHP) { 
    this->engineHP = engineHP; 
}


void Airplane::setMaxRange(int maxRange) { 
    this->maxRange = maxRange; 
}


void Airplane::setCruiseSpeed(int cruiseSpeed) { 
    this->cruiseSpeed = cruiseSpeed; 
}


---------------- Fleet.h (cannot be changed)---------------------------

class Fleet {
private:
    char fileName[STR_SIZE];
    ifstream inFile;
    int count;
    int capacity;
    Airplane * fleetAirplanes;
    bool insert(); // private method.

public:
    Fleet(); // Default constructor.
    Fleet(const Fleet &) = delete;
    // below is overloaded operator 
    Fleet & operator=(const Fleet &) = delete;
    int loadPlanes();
    void printPlanes();
    void listByMake();
    bool addAPlane();
    bool removeAPlane();
    void writePlanes();
    void growArray();
    void searchAirplaneByModel(); // confirmed by teacher

    // New public member functions ( I couldn't get it to work otherwise)
    const char* getFileName() const;
    bool openTheFile();
};

---------------- Fleet.cpp ------------------------
--- These can often be changed a little ------

Fleet::Fleet() {
    count = 0;
    capacity = 3;
    fleetAirplanes = new Airplane[capacity];
    ready = openTheFile();
    if(ready)
        loadPlanes();
}

// growArray()
void Fleet::growArray() {
  capacity *= 2;
  Airplane* newArray = new Airplane[capacity];
  for (int i = 0; i < count; ++i) {
    newArray[i] = fleetAirplanes[i];
  }
  delete[] fleetAirplanes;
  fleetAirplanes = newArray;
}

// loadPlanes()

// printPlanes()

// listByMake()

// addAPlane()   ----> uses growArray()

// removeAPlane() --> by index

// searchAirplaneByModel()

// const char* Fleet::getFileName() ---> a little confused here tbh

// writePlanes() ---> exports file data and closes it

// openTheFile

--------------------------- Main.cpp -----------------------------------
bool success = false
bool result = false
int count = 0
char searchName[STR_SIZE]
char choice = ' ';

// Construct Fleet
Fleet fleet

// set Result for opened file
result = fleet.openTheFile();

// If result = true/false, loadPlanes(), growArray() if 
// needed and print out planes

// Set (integer) loadedCount = fleet.loadPlanes()

// Print planes & menu

// char option created 

// MENU with do while loop:

do {
  displayMenu()
  cin >> option --> user input
  option = toupper(option) ---> sets char to uppercase for less error

  switch (option)
    case 'A':

    case 'L':

    case 'R':

    case 'S':

    case 'M':

    case 'Q':
      (you can use break here of course)
} while (option != 'Q');

return 0;
}
 

    
